#!/usr/bin/env python3
from termcolor import colored
from typing_extensions import Annotated
import typer
import subprocess
import os
import sys

OPTIONS = [
    ("--ignore", "Ignore the all file in .gitignore"),
    ("--clean", "Clean the coding-style-reports.log file"),
    ("--help", "Display this help"),
    ("--short", "Sorten the output"),
]

RULES_C = {
    "C-O1": "The repository must not contain compiled (.o, .a, .so, . . . ), temporary or unnecessary files (*~, #*#, etc.).",
    "C-O2": "Sources in a C program must only have .c or .h extensions.",
    "C-O3": "You are allowed to have 10 functions (including at most 5 non-static functions) in total per file.",
    "C-O4": "The name of the file must define the logical entity it represents, and thus be clear, precise, explicit and unambiguous",
    "C-G1": "Bad file header",
    "C-G2": "There should be only one line between each fonction",
    "C-G3": "Preprocessor directive must be indented",
    "C-G4": "Global Variable must be const",
    "C-G5": "#include should only contain .h files",
    "C-G6": "Line endings must be done in UNIX style",
    "C-G7": "Line should finish only end with a '\\n'",
    "C-G8": "Trailing space",
    "C-G9": "Constant values",
    "C-G10": "Inline assembly must never be used.",
    "C-F1": "A function should only do one thing, not mix different levels of abstraction",
    "C-F2": "The name of a function should define the task it executes and should contain a verb",
    "C-F3": "A line lenght shoud not exceed 80 columns",
    "C-F4": "A function should not exceed 20 lines",
    "C-F5": "A function must not have more than 4 parameters.",
    "C-F6": "A function taking no parameters must take void as a parameter in the function declaration.",
    "C-F7": "Structures must be passed to functions using a pointer, not by copy.",
    "C-F8": "There must be no comment within a function.",
    "C-F9": "Nested functions are not allowed, because they are an extension of the GNU C standard, and because they greatly increase complexity.",
    "C-L1": "A line must correspond to only one statement.",
    "C-L2": "Each indentation level must be done by using 4 spaces.",
    "C-L3": "When using a space as a separator, one and only one space character must be used.",
    "C-L4": "Opening curly brackets must be at the end of the line, after the content it precedes, except for functions definitions where they must be placed alone on their line.",
    "C-L5": "Variables must be declared at the beginning of the function. Only one variable must be declared per statement.",
    "C-L6": "A blank line must separate the variable declarations from the remainder of the function.",
    "C-V1": "All identifier names must be in English, according to the snake_case convention (meaning it is composed exclusively of lowercase, numbers, and underscores).",
    "C-V2": "Variables can be grouped together into a structure if and only if they form a coherent entity.",
    "C-V3": "The asterisk (*) must be attached to the associated variable, with no spaces in between.",
    "C-C1": "Conditional branching",
    "C-C2": "The use of ternary operators is allowed as far as it is kept simple and readable, and if it does not obfuscate code.",
    "C-C3": "Forbidden goto",
    "C-H1": "Header content",
    "C-H2": "Header include guard",
    "C-H3": "Macros",
    "C-A1": "When creating a pointer, if the pointed data is not (or should not be) modified by the function, it should be marked as constant (const)",
    "C-A2": "Prefer the most accurate types possible according to the use of the data.",
    "C-A3": "Files must end with a line break.",
    "C-A4": "Global variables and functions that are not used outside the compilation unit to which they belong should be marked with the static keyword."
}

RULES_HASKELL = {
    "H-O1": "Your delivery folder should contain only files required for compilation.",
    "H-O2": "Sources in a Haskell program should only have extension `.hs`",
    "H-O3": "A Haskell project must be organized in modules",
    "H-O4": "The name of a file should match the name of its module",
    "H-O5": "All modules should explicitly declare their exported definitions",
    "H-G1": "Every Haskell file should start with a standard Epitech header",
    "H-T1": "All top level bindings must have an accompanying type signature",
    "H-M1": "Mutable variables are strictly forbidden",
    "H-M2": "Functions performing unsafe operations are strictly forbidden",
    "H-F1": "A function should only do one thing",
    "H-F2": "The name of a function should define the task it executes and should contain a verb",
    "H-F3": "A Line must be less than 80 characters long",
    "H-F4": "too long function",
    "H-V1": "All identifier names should be in English, according to the lowerCamelCase convention",
    "H-C4": "Nested If statements are strictly forbidden",
    "H-C5": "Guards and if statements which can be expressed as pattern matchings must be expressed as such",
    "H-D1": "The Do notation is forbidden unless it contains a generator (a statement with a left arrow)"
}

RULES = RULES_C | RULES_HASKELL

app = typer.Typer()

app = typer.Typer(
    help="Coding style checker",
    add_completion=False,
    invoke_without_command=True,
)


def read_file(path: str):
    f = open(path, "r")
    lines = f.readlines()
    f.close()
    return lines


def compute_error(lines: list[str]) -> tuple[list, list, list]:
    majors: list[tuple[str, str, str]] = []
    minors: list[tuple[str, str, str]] = []
    infos: list[tuple[str, str, str]] = []
    for line in lines:
        parsed: list[str] = line.split(":")
        for i in range(len(parsed)):
            parsed[i] = parsed[i].strip()
        file, line, level, rule = parsed
        rule = rule.split("#")[0].strip()
        file_name = file.split("/")[-1].strip()
        match level:
            case "MAJOR":
                majors.append((file_name, line, rule))
            case "MINOR":
                minors.append((file_name, line, rule))
            case "INFO":
                infos.append((file_name, line, rule))
    return majors, minors, infos


def print_nb_cs_errors(errors: tuple[list, list, list]):
    majors, minors, infos = errors
    total: int = len(majors) + len(minors) + len(infos)
    print(
        colored("Coding-style errors found !",
                'red', attrs=["bold", "underline", "reverse"]))
    print(
        colored('Fix them before pushing your code !',
                'red', attrs=["bold", "underline", "reverse"]))
    print()
    print(colored(f"Total: {total}", 'magenta'), end=", ")
    print(colored(f"Majors: {len(majors)}", 'red'), end=", ")
    print(colored(f"Minors: {len(minors)}", 'yellow'), end=", ")
    print(colored(f"INFO: {len(infos)}", 'cyan'))


def print_cs_errors(errors: tuple[list, list, list]):
    majors, minors, infos = errors
    for file_name, line, rule in majors:
        print(
            colored(
                f"MAJOR: {file_name} at line:{line} {rule}: {RULES[rule]}",
                'red'
            )
        )
    for file_name, line, rule in minors:
        print(
            colored(
                f"MINOR: {file_name} at line:{line} {rule}: {RULES[rule]}",
                'yellow'
            )
        )
    for file_name, line, rule in infos:
        print(
            colored(
                f"INFO: {file_name} at line:{line} {rule}: {RULES[rule]}",
                'cyan'
            )
        )
    print()


def call_coding_style():
    process = subprocess.Popen(
        "coding-style . .", stdout=subprocess.DEVNULL, shell=True)
    process.communicate()


def ignore_file(lines: list[str]) -> list[str]:
    ignore_file = read_file(".gitignore")
    for line in ignore_file:
        if line.startswith("#"):
            ignore_file.remove(line)
        line = line.strip()
    for line in lines:
        for ignored in ignore_file:
            ignored = ignored.strip().removesuffix("\n")
            file_name = line.split(':')[0].strip(
            ).removeprefix("./")
            if file_name.endswith(ignored):
                lines.remove(line)
    return lines


def help(options):
    print("Usage: coding-style-repo [OPTIONS]")
    print("OPTIONS:")
    for opt in options:
        option, desc = opt
        print(f"\t{option}\t\t{desc}")
    exit(0)


@app.callback()
def main(
    clean: bool = typer.Option(
        False, "--clean", help="Clean coding-style-reports.log"),
    ignore: bool = typer.Option(
        False, "--ignore", help="Ignore file in .gitignore"),
    short: bool = typer.Option(
        False, "--short", help="Shorten the output"),
):
    flags = [flag for flag, _ in OPTIONS if flag.startswith("--")]
    if len(sys.argv) > 1 and sys.argv[1] not in flags:
        print(f"Unknown option {sys.argv[1]}")
        exit(1)

    call_coding_style()
    lines = read_file("coding-style-reports.log")

    if ignore:
        lines = ignore_file(lines)
    if clean:
        os.remove("coding-style-reports.log")

    if len(lines) == 0:
        print(colored("No coding-style error found. Happy coding !", 'green'))
        exit(0)

    errors = compute_error(lines)

    if short:
        print_nb_cs_errors(errors)
    else:
        print_cs_errors(errors)
        print_nb_cs_errors(errors)
    exit(1)


if __name__ == "__main__":
    app()
